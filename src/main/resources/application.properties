# port that will be opened on the server to start the application
server.port=9087

# Configuration for Redis Cluster - Jedis
# List of nodes
cluster.nodes=localhost:7000,localhost:7001,localhost:7002,localhost:7003,localhost:7004,localhost:7005,localhost:7006,localhost:7007,localhost:7008,localhost:7009
cluster.threadPool.maxTotal=20
cluster.threadPool.maxIdle=20
cluster.threadPool.minIdle=1
cluster.threadPool.blockWhenExhausted=true

# Hash table in redis to manage the gateways, service provider and error code mapping.
# This must match the configurators on the servers (SMPP, HTTP)
server.key.gateways=gateways
server.key.serviceProviders=service_providers
server.key.errorCodeMapping=error_code_mapping
server.key.ss7GatewaysHash=ss7_gateways
server.key.ss7SettingsHash=ss7_settings
server.key.routingRules=routing_rules

# Configuration Redis for SMPP and HTTP Servers
# This must match the configurators on the servers (SMPP, HTTP)
smpp.server.configurationHashName=configurations
smpp.server.keyName=smpp_server
smpp.server.value={"state":"STARTED"}

# Configuration Redist to management balance credit
# This must match the configurators on the servers (SMPP, HTTP)
server.balanceHandler.hashName=sp_balance_handler
# Defines the time in seconds that the credit balance will be updated in Redis and the Database.
server.balancePeriod.store=10
# header key to endpoint that receiver the credits used by default X-API-Key
server.apiKeyHeader.name=X-API-Key
# header value for security by API Key
server.apiKey.value=Cn62uZGdSUeGqmtVnHmI7iaji3C74bRd

# General settings to SMPP and HTTP
general.settings=general_settings
general.settings.key.smppHttp=smpp_http
general.settings.key.smscRetry=smsc_retry
general.settings.key.diameter=diameter_config

# Database Configuration
# connection data
# in the URL the parameter smsc_management is the name of the database
spring.datasource.url=jdbc:postgresql://localhost:5432/smsc
# database username
spring.datasource.username=postgres
# database password.
spring.datasource.password=1234

# These values are fixed, they do not require updating
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.database=postgresql
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# default time zone that JPA uses to generate the dates that are inserted into the database.
spring.jpa.properties.hibernate.jdbc.time_zone=America/Managua

# JWT
# This variable is used to encrypt and decrypt the JWT, A SHA 256-bit Key
app.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
# This variable is used to set the expiration time of the JWT in seconds
app.security.jwt.expiration=86400

# Root User
app.root.user=admin
app.root.password=admin

# WebSocket Authorization
# This value must be defined in the properties of the SMPP|HTTP server as well
websocket.header.name=Authorization
websocket.header.value=fcb13146-ecd7-46a5-b9cb-a1e75fae9bdc

# The origin(s) allowed to accept requests is defined, default *
cors.allowed.origins=*

spring.jpa.open-in-view=false
# Logger
# Log level configuration (info, warn, debug, error, fatal, trace, off)
# logging.level.root=INFO